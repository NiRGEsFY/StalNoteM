// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StalNoteM;

#nullable disable

namespace StalNoteM.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240602223724_9_0_mig")]
    partial class _9_0_mig
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("StalNoteM.Data.AuctionItem.AucItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("Ammount")
                        .HasColumnType("int");

                    b.Property<long?>("BuyoutPrice")
                        .HasColumnType("bigint");

                    b.Property<long?>("CurrentPrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Pottential")
                        .HasColumnType("int");

                    b.Property<int?>("Quality")
                        .HasColumnType("int");

                    b.Property<long?>("StartPrice")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("State")
                        .HasColumnType("bit");

                    b.Property<double?>("Stats")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("AucItems");
                });

            modelBuilder.Entity("StalNoteM.Data.AuctionItem.SelledItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int?>("Pottential")
                        .HasColumnType("int");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int?>("Quality")
                        .HasColumnType("int");

                    b.Property<double?>("Stats")
                        .HasColumnType("float");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("SelledItems");
                });

            modelBuilder.Entity("StalNoteM.Data.DataItem.ArmorItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BioinfectionProtection")
                        .HasColumnType("float");

                    b.Property<double>("Bleeding")
                        .HasColumnType("float");

                    b.Property<double>("BleedingProtection")
                        .HasColumnType("float");

                    b.Property<double>("BulletResistance")
                        .HasColumnType("float");

                    b.Property<double>("CarryWeight")
                        .HasColumnType("float");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("CompatibleBackpacks")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("CompatibleContainers")
                        .HasMaxLength(40)
                        .HasColumnType("nvarchar(40)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("ExplosionProtection")
                        .HasColumnType("float");

                    b.Property<string>("Features")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("LacerationProtection")
                        .HasColumnType("float");

                    b.Property<double>("MoveSpeed")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<double>("PeriodicHealing")
                        .HasColumnType("float");

                    b.Property<int>("Pottential")
                        .HasColumnType("int");

                    b.Property<double>("PsyProtection")
                        .HasColumnType("float");

                    b.Property<double>("RadiationProtection")
                        .HasColumnType("float");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("ResistanceToChemicals")
                        .HasColumnType("float");

                    b.Property<double>("ResistanceToElectricity")
                        .HasColumnType("float");

                    b.Property<double>("ResistanceToFire")
                        .HasColumnType("float");

                    b.Property<double>("Stability")
                        .HasColumnType("float");

                    b.Property<double>("Stamina")
                        .HasColumnType("float");

                    b.Property<double>("StaminaRegeneration")
                        .HasColumnType("float");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("ThermalProtection")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ArmorsItems");
                });

            modelBuilder.Entity("StalNoteM.Data.DataItem.ArtefactItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BioinfectionInfectionMax")
                        .HasColumnType("float");

                    b.Property<double>("BioinfectionInfectionMin")
                        .HasColumnType("float");

                    b.Property<double>("BioinfectionProtectionMax")
                        .HasColumnType("float");

                    b.Property<double>("BioinfectionProtectionMin")
                        .HasColumnType("float");

                    b.Property<double>("BioinfectionResistanceMax")
                        .HasColumnType("float");

                    b.Property<double>("BioinfectionResistanceMin")
                        .HasColumnType("float");

                    b.Property<double>("BleedingMax")
                        .HasColumnType("float");

                    b.Property<double>("BleedingMin")
                        .HasColumnType("float");

                    b.Property<double>("BulletResistanceMax")
                        .HasColumnType("float");

                    b.Property<double>("BulletResistanceMin")
                        .HasColumnType("float");

                    b.Property<double>("CarryWeightMax")
                        .HasColumnType("float");

                    b.Property<double>("CarryWeightMin")
                        .HasColumnType("float");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("ChargeRequiredToActivateMax")
                        .HasColumnType("float");

                    b.Property<double>("ChargeRequiredToActivateMin")
                        .HasColumnType("float");

                    b.Property<double>("ExplosionProtectionMax")
                        .HasColumnType("float");

                    b.Property<double>("ExplosionProtectionMin")
                        .HasColumnType("float");

                    b.Property<double>("FrostMax")
                        .HasColumnType("float");

                    b.Property<double>("FrostMin")
                        .HasColumnType("float");

                    b.Property<double>("HealingEffectivenessMax")
                        .HasColumnType("float");

                    b.Property<double>("HealingEffectivenessMin")
                        .HasColumnType("float");

                    b.Property<double>("HealthRegenerationMax")
                        .HasColumnType("float");

                    b.Property<double>("HealthRegenerationMin")
                        .HasColumnType("float");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<double>("LacerationProtectionMax")
                        .HasColumnType("float");

                    b.Property<double>("LacerationProtectionMin")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Pottential")
                        .HasColumnType("int");

                    b.Property<double>("PsyEmissionsMax")
                        .HasColumnType("float");

                    b.Property<double>("PsyEmissionsMin")
                        .HasColumnType("float");

                    b.Property<double>("PsyEmissionsProtectionMax")
                        .HasColumnType("float");

                    b.Property<double>("PsyEmissionsProtectionMin")
                        .HasColumnType("float");

                    b.Property<double>("PsyEmissionsResistanceMax")
                        .HasColumnType("float");

                    b.Property<double>("PsyEmissionsResistanceMin")
                        .HasColumnType("float");

                    b.Property<double>("RadiationMax")
                        .HasColumnType("float");

                    b.Property<double>("RadiationMin")
                        .HasColumnType("float");

                    b.Property<double>("RadiationProtectionMax")
                        .HasColumnType("float");

                    b.Property<double>("RadiationProtectionMin")
                        .HasColumnType("float");

                    b.Property<double>("RadiationResistanceMax")
                        .HasColumnType("float");

                    b.Property<double>("RadiationResistanceMin")
                        .HasColumnType("float");

                    b.Property<double>("ReactionToBurnsMax")
                        .HasColumnType("float");

                    b.Property<double>("ReactionToBurnsMin")
                        .HasColumnType("float");

                    b.Property<double>("ReactionToChemicalBurnsMax")
                        .HasColumnType("float");

                    b.Property<double>("ReactionToChemicalBurnsMin")
                        .HasColumnType("float");

                    b.Property<double>("ReactionToElectricityMax")
                        .HasColumnType("float");

                    b.Property<double>("ReactionToElectricityMin")
                        .HasColumnType("float");

                    b.Property<double>("ReactionToLacerationMax")
                        .HasColumnType("float");

                    b.Property<double>("ReactionToLacerationMin")
                        .HasColumnType("float");

                    b.Property<double>("ReducesDamageByMax")
                        .HasColumnType("float");

                    b.Property<double>("ReducesDamageByMin")
                        .HasColumnType("float");

                    b.Property<double>("ReloadMax")
                        .HasColumnType("float");

                    b.Property<double>("ReloadMin")
                        .HasColumnType("float");

                    b.Property<double>("ResistToFireMax")
                        .HasColumnType("float");

                    b.Property<double>("ResistToFireMin")
                        .HasColumnType("float");

                    b.Property<double>("ResistanceToChemicalsMax")
                        .HasColumnType("float");

                    b.Property<double>("ResistanceToChemicalsMin")
                        .HasColumnType("float");

                    b.Property<double>("SpeedMax")
                        .HasColumnType("float");

                    b.Property<double>("SpeedMin")
                        .HasColumnType("float");

                    b.Property<double>("StabilityMax")
                        .HasColumnType("float");

                    b.Property<double>("StabilityMin")
                        .HasColumnType("float");

                    b.Property<double>("StaminaMax")
                        .HasColumnType("float");

                    b.Property<double>("StaminaMin")
                        .HasColumnType("float");

                    b.Property<double>("StaminaRegenerationMax")
                        .HasColumnType("float");

                    b.Property<double>("StaminaRegenerationMin")
                        .HasColumnType("float");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("TemperatureMax")
                        .HasColumnType("float");

                    b.Property<double>("TemperatureMin")
                        .HasColumnType("float");

                    b.Property<double>("TemperatureProtectionMax")
                        .HasColumnType("float");

                    b.Property<double>("TemperatureProtectionMin")
                        .HasColumnType("float");

                    b.Property<double>("TemperatureResistanceMax")
                        .HasColumnType("float");

                    b.Property<double>("TemperatureResistanceMin")
                        .HasColumnType("float");

                    b.Property<double>("TriggersDamage")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<double>("VitalityMax")
                        .HasColumnType("float");

                    b.Property<double>("VitalityMin")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("ArtefactItems");
                });

            modelBuilder.Entity("StalNoteM.Data.DataItem.Bullet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AmmoType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("ArmorPenetration")
                        .HasColumnType("float");

                    b.Property<double>("Bleeding")
                        .HasColumnType("float");

                    b.Property<double>("Burning")
                        .HasColumnType("float");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Damage")
                        .HasColumnType("float");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("NumberOfProjectiles")
                        .HasColumnType("float");

                    b.Property<double>("Spread")
                        .HasColumnType("float");

                    b.Property<double>("StoppingPower")
                        .HasColumnType("float");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("Bullets");
                });

            modelBuilder.Entity("StalNoteM.Data.DataItem.CaseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("BiologicalInfection")
                        .HasColumnType("float");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<double>("CarryWeight")
                        .HasColumnType("float");

                    b.Property<string>("CaseType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("Effectiveness")
                        .HasColumnType("float");

                    b.Property<double>("InnerProtection")
                        .HasColumnType("float");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Radiation")
                        .HasColumnType("float");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("CaseItems");
                });

            modelBuilder.Entity("StalNoteM.Data.DataItem.SqlItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("AveragePrice")
                        .HasColumnType("bigint");

                    b.Property<bool>("Finding")
                        .HasColumnType("bit");

                    b.Property<string>("ImgWay")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<long>("MinBuyPrice")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(70)
                        .HasColumnType("nvarchar(70)");

                    b.Property<int?>("Pottential")
                        .HasColumnType("int");

                    b.Property<int?>("Quality")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SqlItems");
                });

            modelBuilder.Entity("StalNoteM.Data.DataItem.WeaponItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("AimingTime")
                        .HasColumnType("float");

                    b.Property<string>("AmmoType")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("ArmorPenetration")
                        .HasColumnType("float");

                    b.Property<double>("Bleeding")
                        .HasColumnType("float");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("Damage")
                        .HasColumnType("float");

                    b.Property<double>("DamageDecreaseEnd")
                        .HasColumnType("float");

                    b.Property<double>("DamageDecreaseStart")
                        .HasColumnType("float");

                    b.Property<double>("DamageModifierHeadshot")
                        .HasColumnType("float");

                    b.Property<double>("DamageModifierLimb")
                        .HasColumnType("float");

                    b.Property<double>("DamageToMutants")
                        .HasColumnType("float");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<double>("DrawTime")
                        .HasColumnType("float");

                    b.Property<double>("EndDamage")
                        .HasColumnType("float");

                    b.Property<string>("Features")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<double>("HipFireSpread")
                        .HasColumnType("float");

                    b.Property<double>("HorizontalRecoil")
                        .HasColumnType("float");

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("MagazineCapacity")
                        .HasColumnType("float");

                    b.Property<double>("MaxDistance")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("Pottential")
                        .HasColumnType("int");

                    b.Property<string>("Rank")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<double>("RateOfFire")
                        .HasColumnType("float");

                    b.Property<double>("Reload")
                        .HasColumnType("float");

                    b.Property<double>("Spread")
                        .HasColumnType("float");

                    b.Property<double>("StartDamage")
                        .HasColumnType("float");

                    b.Property<double>("StoppingPower")
                        .HasColumnType("float");

                    b.Property<string>("SubType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("TacticalReload")
                        .HasColumnType("float");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("VerticalRecoil")
                        .HasColumnType("float");

                    b.Property<double>("Weight")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("WeaponsItems");
                });

            modelBuilder.Entity("StalNoteM.Data.Other.Advertising", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("Count")
                        .HasColumnType("int");

                    b.Property<DateTime?>("End")
                        .HasColumnType("datetime2");

                    b.Property<string>("NameCustomer")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("Start")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Advertisings");
                });

            modelBuilder.Entity("StalNoteM.Data.Users.Role", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<int>("MaxArt")
                        .HasColumnType("int");

                    b.Property<int>("MaxCase")
                        .HasColumnType("int");

                    b.Property<int>("MaxLot")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("StalNoteM.Data.Users.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("EndRole")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("StartRole")
                        .HasColumnType("datetime2");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid>("userToken")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("StalNoteM.Data.Users.UserCase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CaseId")
                        .HasColumnType("int");

                    b.Property<int>("CaseItemId")
                        .HasColumnType("int");

                    b.Property<string>("FifthArtefactAddition")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("FifthArtefactId")
                        .HasColumnType("int");

                    b.Property<double?>("FifthArtefactPercent")
                        .HasColumnType("float");

                    b.Property<int?>("FifthArtefactQuality")
                        .HasColumnType("int");

                    b.Property<string>("FirstArtefactAddition")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("FirstArtefactId")
                        .HasColumnType("int");

                    b.Property<double?>("FirstArtefactPercent")
                        .HasColumnType("float");

                    b.Property<int?>("FirstArtefactQuality")
                        .HasColumnType("int");

                    b.Property<string>("ForthArtefactAddition")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("ForthArtefactId")
                        .HasColumnType("int");

                    b.Property<double?>("ForthArtefactPercent")
                        .HasColumnType("float");

                    b.Property<int?>("ForthArtefactQuality")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecondArtefactAddition")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("SecondArtefactId")
                        .HasColumnType("int");

                    b.Property<double?>("SecondArtefactPercent")
                        .HasColumnType("float");

                    b.Property<int?>("SecondArtefactQuality")
                        .HasColumnType("int");

                    b.Property<string>("SixthArtefactAddition")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("SixthArtefactId")
                        .HasColumnType("int");

                    b.Property<double?>("SixthArtefactPercent")
                        .HasColumnType("float");

                    b.Property<int?>("SixthArtefactQuality")
                        .HasColumnType("int");

                    b.Property<string>("ThirdArtefactAddition")
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<int?>("ThirdArtefactId")
                        .HasColumnType("int");

                    b.Property<double?>("ThirdArtefactPercent")
                        .HasColumnType("float");

                    b.Property<int?>("ThirdArtefactQuality")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CaseItemId");

                    b.HasIndex("FifthArtefactId");

                    b.HasIndex("FirstArtefactId");

                    b.HasIndex("ForthArtefactId");

                    b.HasIndex("SecondArtefactId");

                    b.HasIndex("SixthArtefactId");

                    b.HasIndex("ThirdArtefactId");

                    b.ToTable("UserCases");
                });

            modelBuilder.Entity("StalNoteM.Data.Users.UserConfig", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("ShowArt")
                        .HasColumnType("bit");

                    b.Property<bool>("ShowGraph")
                        .HasColumnType("bit");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserConfig");
                });

            modelBuilder.Entity("StalNoteM.Data.Users.UserItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ItemId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Pottential")
                        .HasColumnType("int");

                    b.Property<long>("Price")
                        .HasColumnType("bigint");

                    b.Property<int?>("Quality")
                        .HasColumnType("int");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserItems");
                });

            modelBuilder.Entity("StalNoteM.Data.Users.UserTelegram", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<long>("UserTelegramId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserTelegrams");
                });

            modelBuilder.Entity("StalNoteM.Data.Users.UserToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessCode")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("AccessToken")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.HasOne("StalNoteM.Data.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.HasOne("StalNoteM.Data.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.HasOne("StalNoteM.Data.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.HasOne("StalNoteM.Data.Users.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StalNoteM.Data.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.HasOne("StalNoteM.Data.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StalNoteM.Data.Users.UserCase", b =>
                {
                    b.HasOne("StalNoteM.Data.DataItem.CaseItem", "CaseItem")
                        .WithMany()
                        .HasForeignKey("CaseItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StalNoteM.Data.DataItem.ArtefactItem", "FifthArtefact")
                        .WithMany()
                        .HasForeignKey("FifthArtefactId");

                    b.HasOne("StalNoteM.Data.DataItem.ArtefactItem", "FirstArtefact")
                        .WithMany()
                        .HasForeignKey("FirstArtefactId");

                    b.HasOne("StalNoteM.Data.DataItem.ArtefactItem", "ForthArtefact")
                        .WithMany()
                        .HasForeignKey("ForthArtefactId");

                    b.HasOne("StalNoteM.Data.DataItem.ArtefactItem", "SecondArtefact")
                        .WithMany()
                        .HasForeignKey("SecondArtefactId");

                    b.HasOne("StalNoteM.Data.DataItem.ArtefactItem", "SixthArtefact")
                        .WithMany()
                        .HasForeignKey("SixthArtefactId");

                    b.HasOne("StalNoteM.Data.DataItem.ArtefactItem", "ThirdArtefact")
                        .WithMany()
                        .HasForeignKey("ThirdArtefactId");

                    b.Navigation("CaseItem");

                    b.Navigation("FifthArtefact");

                    b.Navigation("FirstArtefact");

                    b.Navigation("ForthArtefact");

                    b.Navigation("SecondArtefact");

                    b.Navigation("SixthArtefact");

                    b.Navigation("ThirdArtefact");
                });

            modelBuilder.Entity("StalNoteM.Data.Users.UserConfig", b =>
                {
                    b.HasOne("StalNoteM.Data.Users.User", "User")
                        .WithOne("UserConfig")
                        .HasForeignKey("StalNoteM.Data.Users.UserConfig", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StalNoteM.Data.Users.UserItem", b =>
                {
                    b.HasOne("StalNoteM.Data.Users.User", "User")
                        .WithMany("UserItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StalNoteM.Data.Users.UserTelegram", b =>
                {
                    b.HasOne("StalNoteM.Data.Users.User", "User")
                        .WithOne("UserTelegram")
                        .HasForeignKey("StalNoteM.Data.Users.UserTelegram", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StalNoteM.Data.Users.UserToken", b =>
                {
                    b.HasOne("StalNoteM.Data.Users.User", "User")
                        .WithOne("UserToken")
                        .HasForeignKey("StalNoteM.Data.Users.UserToken", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("StalNoteM.Data.Users.User", b =>
                {
                    b.Navigation("UserConfig")
                        .IsRequired();

                    b.Navigation("UserItems");

                    b.Navigation("UserTelegram")
                        .IsRequired();

                    b.Navigation("UserToken")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
